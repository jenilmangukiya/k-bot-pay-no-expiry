// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  username  String
  password  String // Store hashed passwords
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders        Order[]
  payments      Payment[]
  subscriptions Subscription[]
  chatbots      Chatbot[]
}

model Chatbot {
  id             String   @id @default(uuid())
  name           String
  knowledge      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  themeConfig    Json
  starterMessage String
  openAiApiKey   String
  botLogo        String?

  // Relation: each chatbot is owned by one user
  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Order {
  id        String      @id @default(uuid())
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  amount    Float
  status    OrderStatus @default(PENDING) // Tracks overall order state
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  payments Payment[]
}

model Payment {
  id        String        @id @default(uuid())
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  order     Order         @relation(fields: [orderId], references: [id])
  orderId   String
  status    PaymentStatus
  attempts  Int           @default(1) // Tracks payment retries for this order
  amount    Float
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Subscription {
  id        String             @id @default(uuid())
  user      User               @relation(fields: [userId], references: [id])
  userId    String
  plan      SubscriptionPlan   @relation(fields: [planId], references: [id])
  planId    String
  status    SubscriptionStatus @default(ACTIVE)
  startedAt DateTime           @default(now())
  expiresAt DateTime // Set expiration based on plan duration
  updatedAt DateTime           @updatedAt
}

model SubscriptionPlan {
  id          String   @id @default(uuid())
  name        String   @unique
  price       Float    @default(0) // Price of the plan (0 for free plans)
  duration    Int // Duration in days (e.g., 30 for monthly plans)
  description String? // Optional description of the plan
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation: Plans can have multiple subscriptions
  subscriptions Subscription[]
}

enum OrderStatus {
  PENDING // Order placed, waiting for payment
  PAID // Payment successful
  FAILED // Order failed due to unsuccessful payments
  REFUNDED // Order refunded
}

enum PaymentStatus {
  PENDING // Payment initiated but not completed
  SUCCESSFUL // Payment successful
  FAILED // Payment failed
  REFUNDED // Payment refunded
}

enum SubscriptionStatus {
  ACTIVE // Subscription is active
  CANCELED // User canceled subscription
  EXPIRED // Subscription expired
}
